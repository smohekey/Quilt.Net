<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

namespace Quilt.Utilities {
	using System;
	using System.Threading;
	using System.Threading.Tasks;


	/// <summary>
	///   Based on Mike Ward's answer here: https://stackoverflow.com/questions/28472205/c-sharp-event-debounce
	/// </summary>
	public static class ActionDebounceExtensions {
		public static Action Debounce(this Action @this, TimeSpan timeout) {
			CancellationTokenSource? cts = null;

			return () => {
				cts?.Cancel();
				cts = new CancellationTokenSource();

				Task.Delay(timeout, cts.Token).ContinueWith(t => {
					if(t.IsCompletedSuccessfully) {
						@this();
					}
				}, TaskScheduler.Default);
			};
		}

<#
	for(var i = 1; i < 8 + 1; i++) {
		var typeParameters = string.Join(", ", Enumerable.Range(0, i).Select(j => $"T{j}"));
		var parameters = string.Join(", ", Enumerable.Range(0, i).Select(j => $"arg{j}"));
#>
		public static Action<<#=typeParameters#>> Debounce<<#=typeParameters#>>(this Action<<#=typeParameters#>> @this, TimeSpan timeout) {
			CancellationTokenSource? cts = null;

			return (<#=parameters#>) => {
				cts?.Cancel();
				cts = new CancellationTokenSource();

				Task.Delay(timeout, cts.Token).ContinueWith(t => {
					if(t.IsCompletedSuccessfully) {
						@this(<#=parameters#>);
					}
				}, TaskScheduler.Default);
			};
		}

<#
	}
#>
	}
}